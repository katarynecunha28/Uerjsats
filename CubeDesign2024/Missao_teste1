import sensor
import image
import time
import math
import machine
import gc

# Suponha que a escala espacial seja 1 pixel = 1 metro para este exemplo
# Você deve ajustar isso com base nas informações específicas do seu ambiente.
escala_espacial = 1.0

# Localização inicial (latitude, longitude) como ponto de referência
referencia_lat = 41.8379
referencia_long = -87.6828

# Inicializa o arquivo CSV para escrever as informações
csv_filename = "dados_circulo.csv"
csv_file = open(csv_filename, "w")
csv_file.write("Timestamp, Centro_X, Centro_Y, Raio, Área\n")

# Inicializa o tempo para o raio com a maior área
tempo_raio_maior_area = 0

sensor.reset()
sensor.set_pixformat(sensor.GRAYSCALE)
sensor.set_framesize(sensor.QVGA)  # Reduzindo ainda mais a resolução
sensor.skip_frames(time=2000)
sensor.set_auto_gain(False)
sensor.set_auto_whitebal(False)

led = machine.LED("LED_RED")

# Cria uma lista para armazenar as imagens da sequência GIF
sequencia_gif = []

def pixels_para_lat_long(coordenadas_pixels, escala_espacial, referencia_lat, referencia_long):
    pixel_x, pixel_y = coordenadas_pixels
    metros_x = pixel_x * escala_espacial
    metros_y = pixel_y * escala_espacial

    lat = referencia_lat + (metros_y / (111111.0))  # Assumindo que 1 grau de latitude é aproximadamente 111111 metros
    long = referencia_long + (metros_x / (111111.0 * math.cos(math.radians(referencia_lat))) * escala_espacial)

    return lat, long

def seus_dados():
        # Substitua esta função com os dados específicos que você deseja salvar no CSV
        # Certifique-se de retornar uma string formatada corretamente para uma linha no CSV
    timestamp = time.ticks_ms()
    centro_x = 42
    centro_y = -88
    raio = 15
    area_circulo = 3.14 * (raio ** 2)

    # Formate os dados como uma string CSV
    linha_csv = f"{timestamp}, {centro_x}, {centro_y}, {raio}, {area_circulo}\n"
    return linha_csv


while True:
    inicio_frame = time.ticks_ms()  # Marca o início do processamento do frame
    frame = sensor.snapshot()

    # Inverter as cores da imagem
    frame.invert()

    # Segmentação usando limiar de Otsu
    threshold_value = frame.get_stats().l_mean()
    frame.binary([(threshold_value, 255)])

    # Encontrar círculos na imagem segmentada usando a transformada de Hough
    circles = frame.find_circles(threshold=4000, x_margin=20, y_margin=20, r_margin=20, r_min=10, r_max=50, r_step=2)

    if circles:
        for circle in circles:
            # Obter as coordenadas do centro do círculo
            centro_x, centro_y = circle.x(), circle.y()

            # Calcular e imprimir a área do círculo
            raio = circle.r()
            area_circulo = math.pi * (raio ** 2)
            print(f"Área do círculo: {area_circulo:.2f} metros quadrados")

            # Desenhar o contorno do círculo
            frame.draw_circle(circle.x(), circle.y(), circle.r(), color=(0, 255, 0), fill=False)

            # Desenhar o centro do círculo
            frame.draw_cross(centro_x, centro_y, color=(0, 0, 255))

            # Obter o timestamp atual
            timestamp_atual = time.ticks_ms()

            # Calcular o tempo decorrido desde o início
            tempo_decorrido = (timestamp_atual - inicio_frame) / 1000.0

            # Exibir informações sobre o círculo
            print(f"Centro do Círculo: ({centro_x}, {centro_y})")
            print(f"Raio do Círculo: {raio}")
            print(f"Área do Círculo: {area_circulo}")

            # Variável para o timestamp inicial
            timestamp_inicial = time.ticks_ms()

            # Converta as coordenadas de pixel para latitude e longitude
            centroide_lat_long = pixels_para_lat_long((centro_x, centro_y), escala_espacial, referencia_lat, referencia_long)

            # Agora, você pode usar as coordenadas em termos de latitude e longitude conforme necessário.
            print("Centroide (lat, long):", centroide_lat_long)

            # Escrever as informações no arquivo CSV
            csv_file.write(f"{tempo_decorrido}, {centro_x}, {centro_y}, {raio}, {area_circulo}\n")

            # Exibir informações sobre o círculo na imagem
            texto_info = f"Centro: ({centro_x}, {centro_y}) Raio: {raio:.2f} Area: {area_circulo:.2f}"
            frame.draw_string(10, 10, texto_info, color=(0, 255, 0), scale=2)

            # Adicionar informações à imagem
            info_text = f"Centro: ({centro_x}, {centro_y}) Raio: {raio} Área: {area_circulo:.2f} Tempo: {tempo_decorrido:.2f}s"
            frame.draw_string(10, 10, info_text, color=(255, 255, 255))

    fim_frame = time.ticks_ms()  # Marca o fim do processamento do frame
    tempo_frame = fim_frame - inicio_frame

    # Atualiza o tempo do raio com a maior área
    if tempo_frame > tempo_raio_maior_area:
        tempo_raio_maior_area = tempo_frame

    # Adiciona o tempo do raio com a maior área como texto na imagem
    texto_tempo = f"Tempo do Raio com Maior Area: {tempo_raio_maior_area:.2f} segundos"
    frame.draw_string(10, 60, texto_tempo, color=(0, 255, 0), scale=1.5)

    # Salva a imagem diretamente como um GIF
    if len(sequencia_gif) < 10:  # Salva apenas os primeiros 10 quadros
        sequencia_gif.append(frame.compressed(quality=35))

    # Enviar a imagem via USB para visualização no software OpenMV IDE
    print("Enviando frame...")
    frame.compressed(quality=60)
    time.sleep(0.1)  # Aguarde um curto período para garantir que a imagem seja exibida completamente

    # Liberação explícita de memória
    frame = None
    gc.collect()

# Salva a sequência de imagens como um arquivo GIF
gif.save("sequencia.gif", sequencia_gif, duration=100)  # Ajuste a duração conforme necessário

# Fechar o arquivo CSV no final do script
csv_file.close()
código que capta os centroides, do vídeo que mandei agora a pouco
