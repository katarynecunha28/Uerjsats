
unsigned long tempoInicial;

#include <LoRa.h>
#include <Arduino_MKRENV.h>
#include <MKRENV.h>



int meuEndereco = 42;  // Endereço do receptor

void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);

  while(!Serial);
  
  Serial.println("foi");
  if (!LoRa.begin(915E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  Serial.println("LoRa Initializing OK!");

  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);
  }
}

void loop() {
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    int senderAddress = LoRa.read();
    if (senderAddress == meuEndereco) {
      String comando = LoRa.readString();
      Serial.println("Comando recebido: " + comando);
      processarComando(comando);
    }
  }
  receberDadosDosSlaves();
}

void processarComando(String comando) {
  if (comando.equals("A")) {
    enviarDadosParaSlave("Dados para Slave Pro mini", 1);
  } else if (comando.equals("B")) {
    enviarDadosParaSlave("Dados para Slave Nano", 2);
  } else {
    // Comando não reconhecido
    enviarResposta("Comando não reconhecido.");
    return;
  }

}



bool receberDadosDosSlaves() {
  if (Serial1.available() > 0 || Serial.available() > 0) {
    String dadosRecebidos;
    if (Serial1.available() > 0) {
      dadosRecebidos = Serial1.readStringUntil('\n');
    } else {
      dadosRecebidos = Serial.readStringUntil('\n');
    }

    int enderecoRecebido = dadosRecebidos.substring(0, 1).toInt();
    
    // Verifica o endereço do dispositivo e processa os dados recebidos de acordo
    switch (enderecoRecebido) {
      case 3:
        processarDados("Pro mini Slave", dadosRecebidos.substring(1));
        return true;
      case 4:
        processarDados("Arduino Nano Slave", dadosRecebidos.substring(1));
        return true;
      default:
        return false;  // Retorna false se o endereço não for reconhecido
    }
  }
  return false;  // Retorna false se não receber os dados
  Serial.println("nao recebi");
}

void processarDados(String nomeSlave, String dados) {
  Serial1.println("Dados recebidos do " + nomeSlave + ": " + dados);
  Serial.println("Dados recebidos do " + nomeSlave + ": " + dados);
  
  enviarResposta(dados);
}

void enviarDadosParaSlave(String dados, int endereco) {
  Serial1.print(endereco);  // Identificador de destino
  Serial1.print(":");
  Serial1.println(dados);

  Serial.print(endereco);  // Printar no monitor serial
  Serial.print(":");
  Serial.println(dados);
}

void enviarResposta(String resposta) {
  // Envia a resposta de volta para o transmissor
  LoRa.beginPacket();
  LoRa.write(meuEndereco); // Endereço do receptor
  LoRa.print(resposta);
  LoRa.endPacket();

  Serial.println("Resposta enviada: " + resposta);
}
